import telebot
import random
import time
from itertools import cycle
from characters import Protagonist, NPC, Enemy, Direction
from load_all import load_data  


# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
bot = telebot.TeleBot('YOUR_TELEGRAM_BOT_TOKEN')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã
player = None
locations_list = None
location = None
steps_counter = 0
game_started = False
base_location = None  # –ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—Ä—É–≥–∞

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_npc, data_enemy, locations_data = load_data()

def start_game(chat_id):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, —Å–æ–∑–¥–∞–≤–∞—è –∏–≥—Ä–æ–∫–∞ –∏ –≤—ã–±–∏—Ä–∞—è –Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–¥–µ—Ç –∏–≥—Ä–∞.
    """
    global player, locations_list, location, steps_counter, game_started, base_location

    steps_counter = 0
    player_name = bot.get_chat(chat_id).first_name
    index = len(player_name)
    player = Protagonist(player_name, index)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
    locations_list = cycle([Direction(k, v) for k, v in locations_data.items()])
    location = next(locations_list)
    base_location = location  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é

    if not game_started:
        bot.send_message(chat_id, f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {player.name}!")
        game_started = True
    bot.send_message(chat_id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {location.name}: {location.description}")

    show_main_menu(chat_id)

def show_main_menu(chat_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–¥–µ—Ç –∏–≥—Ä–∞.
    """
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ üë§")
    btn2 = telebot.types.KeyboardButton("–í—Ä–∞–≥–∏ üíÄ")
    btn3 = telebot.types.KeyboardButton("–ì–¥–µ —è? üìç")
    btn4 = telebot.types.KeyboardButton("–í–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è")
    btn5 = telebot.types.KeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_message(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    show_start_menu(message.chat.id)

def show_start_menu(chat_id):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å".

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–¥–µ—Ç –∏–≥—Ä–∞.
    """
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_start = telebot.types.KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å")
    markup.add(btn_start)
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å")
def handle_start_game(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å" –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    start_game(message.chat.id)

def handle_player_death(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞, –∑–∞–≤–µ—Ä—à–∞—è –∏–≥—Ä—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—è –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–¥–µ—Ç –∏–≥—Ä–∞.
    """
    global player, locations_list, location, steps_counter, game_started

    bot.send_message(chat_id, "–í—ã –ø–æ–≥–∏–±–ª–∏. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
    
    # –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    player = None
    locations_list = None
    location = None
    steps_counter = 0
    game_started = False

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ
    show_start_menu(chat_id)

def handle_game_completion(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –±–∞–∑–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.

    Args:
        chat_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ Telegram, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏–¥–µ—Ç –∏–≥—Ä–∞.
    """
    global player, locations_list, location, steps_counter, game_started

    bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!\n–î–ª—è –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç–æ —Ç–∞–π–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ: https://clck.ru/3CjnLK", disable_web_page_preview=True)
    
    # –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    player = None
    locations_list = None
    location = None
    steps_counter = 0
    game_started = False

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ
    show_start_menu(chat_id)

@bot.message_handler(func=lambda message: message.text == "–í–ø–µ—Ä–µ–¥ ‚¨ÜÔ∏è")
def move_forward(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –¥–≤–∏–≥–∞—è –∏–≥—Ä–æ–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏—è–º –∏ –≤—ã–ø–æ–ª–Ω—è—è —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    global steps_counter, location, locations_list, base_location

    steps_counter += 1

    if steps_counter >= 5:
        steps_counter = 0
        location = next(locations_list)
        bot.send_message(message.chat.id, "\n\n=====–ú–µ—Å—Ç–Ω–æ—Å—Ç—å –º–µ–Ω—è–µ—Ç—Å—è=====")
        bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {location.name}: {location.description}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        if location == base_location:
            handle_game_completion(message.chat.id)
            return

    # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    unit = random.choice([create_enemy(), create_npc()])
    bot.send_message(message.chat.id, "=============================")
    bot.send_message(message.chat.id, f"–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: HP={player.hp}, –°–ò–õ–ê={player.strength}, –ë–†–û–ù–Ø={player.armor}")
    bot.send_message(message.chat.id, "=============================\n")

    if isinstance(unit, NPC):
        bot.send_message(message.chat.id, f"–í–∞–º –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π NPC {unit.name}.")
        time.sleep(1)
        action_index = unit.action()
        bot.send_message(message.chat.id, f"-- {unit.name} –≥–æ–≤–æ—Ä–∏—Ç: {unit.questions[action_index]}")

        if (action_index + 1) % 4 == 1:
            bot.send_message(message.chat.id, "–î–µ—Ä–∂–∏ —è–±–ª–æ–∫–æ. –ï—Å–ª–∏ —Å–æ–±–µ—Ä–µ—à—å 3 —à—Ç—É–∫–∏, –ø–æ–ª—É—á–∏—à—å +1 –∫ —Å–∏–ª–µ.")
            player.take("apple")

        elif (action_index + 1) % 4 == 2:
            bot.send_message(message.chat.id, "–î–µ—Ä–∂–∏ —ç–ª–∏–∫—Å–∏—Ä –∂–∏–∑–Ω–∏. –ö–∞–∂–¥—ã–µ 2 —à—Ç—É–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç HP –Ω–∞ 1.")
            player.take("boost")

        elif (action_index + 1) % 4 == 3:
            bot.send_message(message.chat.id, "–î–µ—Ä–∂–∏ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫—É—é —Ä—É–¥—É. –°–æ–±–µ—Ä–µ—à—å 3 —Ä—É–¥—ã - —É–ª—É—á—à–∏—à—å –±—Ä–æ–Ω—é –Ω–∞ 1.")
            player.take("metall")

        else:
            bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–µ–π –¥–æ—Ä–æ–≥–∏, –ø—É—Ç–Ω–∏–∫ - —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª, –Ω–æ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è–ª. –ê —ç—Ç–æ —É–∂–µ –Ω–µ–ø–ª–æ—Ö–æ.")

    else:
        bot.send_message(message.chat.id, f"–í–∞–º –ø–æ–≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –≤—Ä–∞–≥ {unit.name}.")
        time.sleep(1)
        action_index = unit.action()
        bot.send_message(message.chat.id, f"-- {unit.name} –≥–æ–≤–æ—Ä–∏—Ç: {unit.questions[action_index]}")

        if action_index == 3:
            bot.send_message(message.chat.id, "–í–∞—Å –º–∏–Ω–æ–≤–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—Ä–∞–≥ —Ä–µ—à–∏–ª, —á—Ç–æ –≤—ã –Ω–µ–¥–æ—Å—Ç–æ–π–Ω—ã —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –Ω–∏–º. –í—Ä–∞–≥–æ–≤ –º–Ω–æ–≥–æ, –∞ –≤—ã —É –º–∞–º—ã –æ–¥–∏–Ω. –ò–¥–∏—Ç–µ –¥–∞–ª—å—à–µ.")
        else:
            bot.send_message(message.chat.id, f"–ó–∞–≤—è–∑–∞–ª—Å—è –±–æ–π: —É—Ä–æ–Ω –≤—Ä–∞–≥–∞ {unit.attack + location.effect}")
            time.sleep(1)
            while unit.hp > 0 and player.hp > 0:
                try:
                    bot.send_message(message.chat.id, "x –í–∞—Å –∞—Ç–∞–∫–æ–≤–∞–ª–∏")
                    player.take_hit(unit.attack + location.effect - player.armor)
                    if player.hp <= 0:
                        handle_player_death(message.chat.id)
                        return

                    bot.send_message(message.chat.id, f"–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏: HP={player.hp}, –°–ò–õ–ê={player.strength}")
                    time.sleep(1)
                    bot.send_message(message.chat.id, "x –£–¥–∞—Ä –≤ –æ—Ç–≤–µ—Ç:")
                    player.attack(unit)
                    time.sleep(1)
                    if unit.hp > 0:
                        bot.send_message(message.chat.id, f"–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞: HP={unit.hp}, –ê–¢–ê–ö–ê={unit.attack + location.effect}")
                    else:
                        bot.send_message(message.chat.id, '======–í—ã –º–æ–ª–æ–¥–µ—Ü, –º–æ–Ω—Å—Ç—Ä –ø–æ–≤–µ—Ä–∂–µ–Ω======')
                except Exception as e:
                    bot.send_message(message.chat.id, str(e))
                    handle_player_death(message.chat.id)
                    return

    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text in ["–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ üë§", "–í—Ä–∞–≥–∏ üíÄ"])
def choose_subcategory(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–ª–∏ –í—Ä–∞–≥–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    category = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    if category == "–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ üë§":
        for subcategory in data_npc.keys():
            markup.add(telebot.types.KeyboardButton(subcategory))
    elif category == "–í—Ä–∞–≥–∏ üíÄ":
        for subcategory in data_enemy.keys():
            markup.add(telebot.types.KeyboardButton(subcategory))

    markup.add(telebot.types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {category}:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text in data_npc.keys())
def generate_npc_phrase(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É NPC.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    subcategory = message.text
    npc = NPC(subcategory)
    npc.load_questions(data_npc[subcategory])  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã NPC

    if not npc.questions:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: —É NPC {subcategory} –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        show_main_menu(message.chat.id)
        return

    phrase_index = npc.action()
    phrase = data_npc[subcategory][phrase_index]
    bot.send_message(message.chat.id, f"{subcategory} –≥–æ–≤–æ—Ä–∏—Ç: {phrase}")
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text in data_enemy.keys())
def generate_enemy_phrase(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í—Ä–∞–≥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –≤—Ä–∞–≥–∞, –∞ —Ç–∞–∫–∂–µ –µ–≥–æ —É—Ä–æ–Ω.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    subcategory = message.text
    enemy = Enemy(subcategory)
    enemy.load_questions(data_enemy[subcategory]['phrases'])  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –≤—Ä–∞–≥–∞
    phrase_index = enemy.action()
    phrase = data_enemy[subcategory]['phrases'][phrase_index]
    damage = data_enemy[subcategory]['damage']
    bot.send_message(message.chat.id, f"{subcategory} –≥–æ–≤–æ—Ä–∏—Ç: {phrase}\n–£—Ä–æ–Ω: {damage}")
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–ì–¥–µ —è? üìç")
def show_location(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì–¥–µ —è?" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    global location
    if location is None:
        location = next(locations_list)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
    bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ {location.name}: {location.description}")
    show_main_menu(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí")
def show_inventory(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞.

    Args:
        message (telebot.types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram.
    """
    bot.send_message(message.chat.id, format_inventory(player.inventory))
    show_main_menu(message.chat.id)

def create_npc():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ NPC.

    Returns:
        NPC: –°–ª—É—á–∞–π–Ω—ã–π NPC –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.
    """
    names = list(data_npc.keys())
    unit = NPC(random.choice(names))
    unit.load_questions(data_npc[unit.name])
    return unit

def create_enemy():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞.

    Returns:
        Enemy: –°–ª—É—á–∞–π–Ω—ã–π –≤—Ä–∞–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.
    """
    names = list(data_enemy.keys())
    unit = Enemy(random.choice(names))
    unit.load_questions(data_enemy[unit.name]['phrases'])
    unit.load_attack(data_enemy[unit.name]['damage'])
    return unit

def format_inventory(inventory):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–∞.

    Args:
        inventory (dict): –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.
    """
    result = "== –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:\n"
    if len(inventory) == 0:
        result += "–ü—É—Å—Ç–æ\n"
    else:
        result += f"–Ø–±–ª–æ–∫–∏: {inventory.get('apple', 0)} —à—Ç.\n"
        result += f"–≠–ª–∏–∫—Å–∏—Ä: {inventory.get('boost', 0)} —à—Ç.\n"
        result += f"–ñ–µ–ª–µ–∑–æ: {inventory.get('metall', 0)} —à—Ç.\n"
    return result

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
